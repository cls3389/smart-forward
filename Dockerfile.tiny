# 超小 Docker 镜像 - 使用 scratch
FROM rust:1.88-alpine AS builder

# 设置工作目录
WORKDIR /app

# 安装构建依赖
RUN apk add --no-cache \
    pkgconfig \
    openssl-dev \
    musl-dev \
    ca-certificates

# 设置环境变量
ENV CARGO_TERM_COLOR=always
ENV RUST_BACKTRACE=1
ENV RUSTFLAGS="-C target-cpu=native -C link-arg=-s"

# 复制 Cargo 文件
COPY Cargo.toml Cargo.lock ./

# 创建虚拟 main.rs 用于依赖预编译
RUN mkdir src && echo "fn main() {}" > src/main.rs

# 预编译依赖
RUN cargo build --release

# 复制源代码
COPY src ./src

# 构建应用（静态链接）
RUN cargo build --release --verbose

# 运行时镜像 - 使用 scratch（最小）
FROM scratch

# 复制 CA 证书
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# 从构建镜像复制二进制文件
COPY --from=builder /app/target/release/smart-forward /smart-forward

# 暴露端口
EXPOSE 443 99 6690 999

# 启动命令
ENTRYPOINT ["/smart-forward"]
