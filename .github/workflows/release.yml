name: 🚀 全平台发布

# 触发条件: 推送版本标签
on:
  push:
    tags: ['v*']
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 1️⃣ 多平台二进制构建
  build-binaries:
    name: 🔨 构建 ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows-x86_64
            target: x86_64-pc-windows-msvc
            binary: smart-forward.exe
            archive: smart-forward-windows-x86_64.zip
            
          - os: macos-latest
            platform: macos-x86_64
            target: x86_64-apple-darwin
            binary: smart-forward
            archive: smart-forward-macos-x86_64.tar.gz
            
          - os: macos-latest
            platform: macos-aarch64
            target: aarch64-apple-darwin
            binary: smart-forward
            archive: smart-forward-macos-aarch64.tar.gz
            
          - os: ubuntu-latest
            platform: linux-x86_64
            target: x86_64-unknown-linux-gnu
            binary: smart-forward
            archive: smart-forward-linux-x86_64.tar.gz
            
          - os: ubuntu-latest
            platform: linux-aarch64
            target: aarch64-unknown-linux-gnu
            binary: smart-forward
            archive: smart-forward-linux-aarch64.tar.gz

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 缓存依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Linux ARM64 交叉编译
      - name: 安装交叉编译工具 (Linux ARM64)
        if: matrix.platform == 'linux-aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: 构建二进制
        run: cargo build --release --target ${{ matrix.target }}

      - name: 打包 (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "创建打包目录..."
          mkdir -p dist
          echo "复制二进制文件..."
          cp target/${{ matrix.target }}/release/${{ matrix.binary }} dist/
          echo "复制配置文件..."
          cp config.yaml.example dist/config.yaml
          cp README.md dist/
          echo "打包内容:"
          ls -la dist/
          echo "创建压缩包..."
          cd dist && tar -czf ../${{ matrix.archive }} *
          cd ..
          echo "验证压缩包:"
          ls -la ${{ matrix.archive }}

      - name: 打包 (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "创建打包目录..."
          New-Item -ItemType Directory -Force -Path "dist"
          Write-Host "复制二进制文件..."
          Copy-Item "target/${{ matrix.target }}/release/${{ matrix.binary }}" "dist/"
          Write-Host "复制配置文件..."
          Copy-Item "config.yaml.example" "dist/config.yaml"
          Copy-Item "README.md" "dist/"
          Write-Host "打包内容:"
          Get-ChildItem "dist/" | Format-Table
          Write-Host "创建压缩包..."
          Compress-Archive -Path "dist/*" -DestinationPath "${{ matrix.archive }}"
          Write-Host "验证压缩包:"
          Get-Item "${{ matrix.archive }}" | Format-Table

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive }}
          path: ${{ matrix.archive }}
          retention-days: 7

  # 2️⃣ Docker多架构构建
  build-docker:
    name: 🐳 Docker多架构构建
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 3️⃣ 自动发布
  create-release:
    name: 📦 创建GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    if: always() && needs.build-binaries.result == 'success'
    permissions:
      contents: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 准备发布文件
        run: |
          mkdir -p release-files
          echo "查找构建产物..."
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -print
          echo "复制构建产物..."
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} release-files/ \;
          echo "发布文件列表:"
          ls -la release-files/

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Smart Forward ${{ github.ref_name }}
          files: release-files/*
          body: |
            # 🚀 Smart Forward ${{ github.ref_name }}
            
            ## 📦 下载二进制文件
            - **Windows**: `smart-forward-windows-x86_64.zip`
            - **macOS Intel**: `smart-forward-macos-x86_64.tar.gz`
            - **macOS Apple Silicon**: `smart-forward-macos-aarch64.tar.gz`
            - **Linux x86_64**: `smart-forward-linux-x86_64.tar.gz`
            - **Linux ARM64**: `smart-forward-linux-aarch64.tar.gz`
            
            ## 🐳 Docker镜像 (Alpine 3.18 - 仅8MB)
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            docker run -d --name smart-forward --network host ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
