name: üöÄ ÂÖ®Âπ≥Âè∞ÂèëÂ∏É

on:
  push:
    tags: ['v*']
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: smart-forward-windows-x64.exe
          
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: smart-forward-linux-x64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: smart-forward-linux-x64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: smart-forward-linux-arm64
          - target: armv7-unknown-linux-musleabihf
            os: ubuntu-latest
            name: smart-forward-linux-armv7
          
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            name: smart-forward-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: smart-forward-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools
        fi
        if [[ "${{ matrix.target }}" == "aarch64"* ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi
        if [[ "${{ matrix.target }}" == "armv7"* ]]; then
          sudo apt-get install -y gcc-arm-linux-gnueabihf
        fi

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifact (Windows)
      if: runner.os == 'Windows'
      run: |
        copy target\${{ matrix.target }}\release\smart-forward.exe ${{ matrix.name }}

    - name: Prepare artifact (Unix)
      if: runner.os != 'Windows'
      run: |
        cp target/${{ matrix.target }}/release/smart-forward ${{ matrix.name }}
        chmod +x ${{ matrix.name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release archives
      run: |
        cd artifacts
        for dir in */; do
          if [[ "$dir" == *"windows"* ]]; then
            cd "$dir" && zip "../${dir%/}.zip" * && cd ..
          else
            cd "$dir" && tar -czf "../${dir%/}.tar.gz" * && cd ..
          fi
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*.zip
          artifacts/*.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}