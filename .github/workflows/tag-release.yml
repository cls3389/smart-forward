name: 发布构建

# 只在推送版本标签时触发，避免频繁构建
on:
  push:
    tags:
      - 'v*'  # 只在推送版本标签时触发
  workflow_dispatch: # 手动触发

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 构建所有平台的二进制文件
  build:
    name: 构建 ${{ matrix.platform }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: windows-latest
            platform: windows
            arch: x86_64
            target: x86_64-pc-windows-msvc
            binary_name: smart-forward.exe
            artifact_name: smart-forward-windows-x86_64.zip
            
          # macOS Intel
          - os: macos-latest
            platform: macos
            arch: x86_64
            target: x86_64-apple-darwin
            binary_name: smart-forward
            artifact_name: smart-forward-macos-x86_64.tar.gz
            
          # macOS Apple Silicon
          - os: macos-latest
            platform: macos
            arch: aarch64
            target: aarch64-apple-darwin
            binary_name: smart-forward
            artifact_name: smart-forward-macos-aarch64.tar.gz
            
          # Linux x86_64
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            binary_name: smart-forward
            artifact_name: smart-forward-linux-x86_64.tar.gz
            
          # Linux ARM64
          - os: ubuntu-latest
            platform: linux
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            binary_name: smart-forward
            artifact_name: smart-forward-linux-aarch64.tar.gz

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 缓存 Cargo 依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 安装交叉编译工具链 (Linux ARM64)
        if: matrix.platform == 'linux' && matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          rustup target add ${{ matrix.target }}

      - name: 设置交叉编译环境 (Linux ARM64)
        if: matrix.platform == 'linux' && matrix.arch == 'aarch64'
        run: |
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: 安装 Rust 目标
        run: rustup target add ${{ matrix.target }}

      - name: 构建项目
        run: cargo build --release --target ${{ matrix.target }}

      - name: 创建发布目录 (Unix)
        if: matrix.platform != 'windows'
        run: |
          mkdir -p release/${{ matrix.platform }}-${{ matrix.arch }}
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/${{ matrix.platform }}-${{ matrix.arch }}/
          cp config.yaml.example release/${{ matrix.platform }}-${{ matrix.arch }}/config.yaml
          cp README.md release/${{ matrix.platform }}-${{ matrix.arch }}/README.md 2>/dev/null || true

      - name: 创建发布目录 (Windows)
        if: matrix.platform == 'windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "release/${{ matrix.platform }}-${{ matrix.arch }}"
          Copy-Item "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "release/${{ matrix.platform }}-${{ matrix.arch }}/"
          Copy-Item "config.yaml.example" "release/${{ matrix.platform }}-${{ matrix.arch }}/config.yaml"
          if (Test-Path "README.md") { Copy-Item "README.md" "release/${{ matrix.platform }}-${{ matrix.arch }}/README.md" }

      - name: 创建压缩包 (Unix)
        if: matrix.platform != 'windows'
        run: |
          cd release/${{ matrix.platform }}-${{ matrix.arch }}
          tar -czf ../${{ matrix.artifact_name }} *

      - name: 创建压缩包 (Windows)
        if: matrix.platform == 'windows'
        shell: powershell
        run: |
          Set-Location "release/${{ matrix.platform }}-${{ matrix.arch }}"
          Compress-Archive -Path * -DestinationPath "../${{ matrix.artifact_name }}"

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/${{ matrix.artifact_name }}
          retention-days: 30

  # 构建多架构 Docker 镜像
  docker:
    name: 构建多架构 Docker 镜像
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建并推送多架构 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.simple
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

  # 创建 GitHub Release
  release:
    name: 创建 GitHub Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    permissions:
      contents: write
      packages: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 准备发布文件
        run: |
          mkdir -p release-files
          find artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do
            cp "$file" release-files/
          done
          ls -la release-files/

      - name: 生成发布说明
        id: release_notes
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          
          cat > release-notes.md << EOF
          # Smart Forward $VERSION
          
          ## 🚀 新功能
          - 智能网络转发器正式发布
          - 支持 Windows、macOS、Linux (x86_64/ARM64)
          - Docker 多架构镜像支持
          - 支持 TCP、UDP、HTTP 协议转发
          - 动态地址解析与故障转移
          - DNS 缓存优化
          - 健康检查与自动切换
          
          ## 📦 下载
          
          ### Windows
          - \`smart-forward-windows-x86_64.zip\` - Windows x86_64
          
          ### macOS
          - \`smart-forward-macos-x86_64.tar.gz\` - macOS Intel
          - \`smart-forward-macos-aarch64.tar.gz\` - macOS Apple Silicon
          
          ### Linux
          - \`smart-forward-linux-x86_64.tar.gz\` - Linux x86_64
          - \`smart-forward-linux-aarch64.tar.gz\` - Linux ARM64
          
          ## 🐳 Docker
          \`\`\`bash
          # 拉取最新镜像
          docker pull ghcr.io/${{ github.repository }}:$VERSION
          
          # 运行容器
          docker run -d \\
            --name smart-forward \\
            -p 443:443 \\
            -p 99:99 \\
            -p 6690:6690 \\
            -p 999:999 \\
            -v \$(pwd)/config.yaml:/app/config.yaml:ro \\
            ghcr.io/${{ github.repository }}:$VERSION
          \`\`\`
          
          ## 📋 使用说明
          1. 下载对应平台的压缩包
          2. 解压到目标目录
          3. 复制 \`config.yaml\` 并根据需求修改配置
          4. 运行程序
          
          ## 🔧 配置示例
          \`\`\`yaml
          # 基本配置
          logging:
            level: "info"
            format: "json"
          
          network:
            listen_addr: "0.0.0.0"
          
          rules:
            - name: "HTTPS"
              listen_port: 443
              protocol: "tcp"
              targets:
                - "your-server:443"
          \`\`\`
          
          ## 🛠️ 技术特性
          - 高性能异步网络处理
          - 支持同端口多协议 (TCP+UDP)
          - HTTP 自动跳转 HTTPS
          - 智能故障转移机制
          - 完整的日志记录
          - 跨平台兼容性
          EOF
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Smart Forward ${{ env.VERSION }}
          body_path: release-notes.md
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
