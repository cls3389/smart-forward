name: 多平台构建和发布

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      platform:
        description: '构建平台'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - windows
        - macos
        - linux
      release:
        description: '发布构建'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 检查代码质量
  check:
    name: 代码检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: 缓存 Cargo 依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 代码格式化检查
        run: cargo fmt -- --check

      - name: 代码质量检查
        run: cargo clippy -- -D warnings

      - name: 构建检查
        run: cargo check --all-targets

  # 测试
  test:
    name: 运行测试
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 缓存 Cargo 依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 运行测试
        run: cargo test --verbose

  # 多平台构建
  build:
    name: 构建 ${{ matrix.platform }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    needs: [check, test]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: windows-latest
            platform: windows
            arch: x86_64
            target: x86_64-pc-windows-msvc
            artifact_name: smart-forward-windows-x86_64.exe
            
          # macOS
          - os: macos-latest
            platform: macos
            arch: x86_64
            target: x86_64-apple-darwin
            artifact_name: smart-forward-macos-x86_64
            
          - os: macos-latest
            platform: macos
            arch: aarch64
            target: aarch64-apple-darwin
            artifact_name: smart-forward-macos-aarch64
            
          # Linux
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            artifact_name: smart-forward-linux-x86_64
            
          - os: ubuntu-latest
            platform: linux
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            artifact_name: smart-forward-linux-aarch64

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 缓存 Cargo 依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 安装交叉编译工具链 (Linux)
        if: matrix.platform == 'linux' && matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          rustup target add ${{ matrix.target }}

      - name: 设置交叉编译环境 (Linux ARM64)
        if: matrix.platform == 'linux' && matrix.arch == 'aarch64'
        run: |
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: 构建项目
        run: |
          cargo build --release --target ${{ matrix.target }}
          mkdir -p dist/${{ matrix.platform }}-${{ matrix.arch }}

      - name: 复制二进制文件
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            cp target/${{ matrix.target }}/release/smart-forward.exe dist/${{ matrix.platform }}-${{ matrix.arch }}/${{ matrix.artifact_name }}
          else
            cp target/${{ matrix.target }}/release/smart-forward dist/${{ matrix.platform }}-${{ matrix.arch }}/${{ matrix.artifact_name }}
          fi

      - name: 复制配置文件
        run: |
          cp config.yaml.example dist/${{ matrix.platform }}-${{ matrix.arch }}/config.yaml
          cp README.md dist/${{ matrix.platform }}-${{ matrix.arch }}/README.md 2>/dev/null || true

      - name: 创建压缩包
        run: |
          cd dist/${{ matrix.platform }}-${{ matrix.arch }}
          if [ "${{ matrix.platform }}" = "windows" ]; then
            powershell Compress-Archive -Path * -DestinationPath ../${{ matrix.platform }}-${{ matrix.arch }}.zip
          else
            tar -czf ../${{ matrix.platform }}-${{ matrix.arch }}.tar.gz *
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/${{ matrix.platform }}-${{ matrix.arch }}.tar.gz

  # Docker 构建
  docker:
    name: 构建 Docker 镜像
    runs-on: ubuntu-latest
    needs: [check, test]
    if: github.event_name == 'push' || github.event.inputs.platform == 'all'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            smart-forward:latest
            smart-forward:${{ github.sha }}
            smart-forward:${{ github.ref_name }}

  # 发布 Release
  release:
    name: 创建 Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
            dist/*.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 安装 cargo-audit
        run: cargo install cargo-audit

      - name: 运行安全审计
        run: cargo audit

      - name: 安装 cargo-deny
        run: cargo install cargo-deny

      - name: 运行许可证检查
        run: cargo deny check
