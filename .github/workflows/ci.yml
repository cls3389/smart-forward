name: CI Pipeline

# 只在发布版本时触发，避免频繁构建
on:
  push:
    tags:
      - 'v*'  # 只在推送版本标签时触发
  workflow_dispatch: # 手动触发

# 并发控制，避免重复运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 快速检查作业 - 优先运行，快速失败
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    timeout-minutes: 5  # 严格限制时间
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 只获取最新提交，减少下载时间

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

  # 测试作业 - 只在快速检查通过后运行
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: quick-check
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: cargo test --verbose

  # 构建作业 - 只在测试通过后运行
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smart-forward-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/smart-forward*

  # 安全扫描 - 可选，减少频率
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quick-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit
