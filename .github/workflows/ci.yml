name: 🔍 持续集成

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'src/**'
      - 'Cargo.*'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # 🚀 快速检查
  check:
    name: 🔍 代码检查
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: 缓存依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-check-
            ${{ runner.os }}-cargo-

      - name: 检查格式
        run: cargo fmt -- --check

      - name: Clippy 检查
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: 运行测试
        run: cargo test --verbose

  # 🐳 Docker 快速构建测试
  docker-test:
    name: 🐳 Docker 构建测试
    runs-on: ubuntu-latest
    timeout-minutes: 8
    if: contains(github.event.head_commit.message, '[docker]') || github.event_name == 'pull_request'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 构建 Docker 镜像 (测试)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: smart-forward:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🛡️ 安全扫描
  security:
    name: 🛡️ 安全扫描
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: Rust 安全审计
        uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # 📊 结果汇总
  summary:
    name: 📊 CI 结果
    runs-on: ubuntu-latest
    needs: [check, docker-test, security]
    if: always()
    steps:
      - name: 生成 CI 报告
        run: |
          echo "## 🎯 CI 检查结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 检查项 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.check.result }}" == "success" ]; then
            echo "| 🔍 代码检查 | ✅ 通过 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔍 代码检查 | ❌ 失败 |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.docker-test.result }}" == "success" ]; then
            echo "| 🐳 Docker构建 | ✅ 通过 |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.docker-test.result }}" == "skipped" ]; then
            echo "| 🐳 Docker构建 | ⏭️ 跳过 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🐳 Docker构建 | ❌ 失败 |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "| 🛡️ 安全扫描 | ✅ 通过 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🛡️ 安全扫描 | ❌ 失败 |" >> $GITHUB_STEP_SUMMARY
          fi
